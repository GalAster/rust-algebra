package examples: tests;

world imports {
  import tuples;
}
// wasm-tools component embed --dummy tuples.wit -t
interface tuples {
  record point {
    x: u8,
    y: u32,
    z: u64
  }
  variant unite {
    a,
    b(tuple<u8>),
    c(tuple<u8, u8, u8, u8, u8, u8, u8, u8>),
  }
  //
  //     tuple0: func(x: tuple<>);
  //     tuple1: func(x: tuple<u8>);
  //     tuple2: func(x: tuple<u8, u8>);
  //     tuple22: func(x: tuple<tuple<u8, u8>, tuple<u8, u8>>);
  //     tuple4: func(x: tuple<u8, u8, u8, u8>);
  //     tuple16: func(x: tuple<u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8>);
  //     tuple17: func(x: tuple<u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8>);
  //
  //     tuple-r0: func() -> tuple<>;
  //     tuple-r1: func() -> tuple<u8>;
  //     tuple-r2: func() -> tuple<u8, f32, f32>;
  //     test-result: func(x: result<u8, u8>);
  //     test-variant: func(x: test);
  test-option1: func(x: option<bool>);   // i32 i32
  test-option2: func(x: option<u8>);     // i32 i32
  test-option3: func(x: option<u64>);    // i32 i64
  test-option4: func(x: option<string>); // i32 i32 i32
  test-option5: func(x: option<point>);  // i32 i32 i32 i64
  test-option6: func(x: option<unite>);  // i32 i32 i32 i32 i32 i32 i32 i32 i32 i32
  test-option7: func(x: option<tuple<u8, u16, u32>>);  // i32 i32 i32 i32
  test-option8: func(x: option<list<u8>>);  // i32 i32 i32
}

