



generic Order {
    where {
        Order: Ordering = DefaultOrder
    }
}
trait Comparable<Order> {
    type Other = Self;

    compare(self, other: Comparable::Other) -> CompareResult;

    #inline(always)
    final comparable(self, other: Comparable::Other) -> bool {
        match self.compare(other) {
            case CompareResult::Incomparable: false
            else                            : true
        }
    }
    
    #inline(always)
    final `>`(self, other: Comparable::Other) -> bool {
        match self.compare(other) {
            case CompareResult::Greater: true
            else                       : false
        }
    }
    #inline(always)
    final `⩾`(self, other: Comparable::Other) {
        match self.compare(other) {
            case CompareResult::Greater: true
            case CompareResult::Equal  : true
            else                       : false
        }
    }
    #inline(always)
    final `=`(self, other: Comparable::Other) {
        match self.compare(other) {
            case CompareResult::Equal: true
            else                     : false
        }
    }
    #inline(always)
    final `⩽`(self, other: Comparable::Other) {
        match self.compare(other) {
            case CompareResult::Less : true
            case CompareResult::Equal: true
            else                     : false
        }
    }
    #inline(always)
    final `<`(self, other: Comparable::Other) {
        match self.compare(other) {
            case CompareResult::Less: true
            else                    : false
        }
    }
    #inline(always)
    final `≠`(self, other: Comparable::Other) {
        match self.compare(other) {
            case CompareResult::Equal: false
            else                     : true
        }
    }
}

#[deriver(structure)]
macro derive_comparable() {

}

enum CompareResult {
    Greater,
    Equal,
    Less,
    Incomparable,
}

trait Ordering {

}

structure DefaultOrder {

}

structure NaturalString {
    #compare()
    inner: String
}

structure NaturalOrder {

}

structure InsertionOrder {

}

