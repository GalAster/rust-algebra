#primitive
structure u64 { }


structure u128 {
    lower: u64,
    upper: u64,
}

extends u128 {
    From::from(self, value: u8) -> Self {
        return u128 { lower: value as u64, upper: 0 };
}
From::from(self, value: u16) -> Self {
    return u128 { lower: value as u64, upper: 0 };
}
From::from(self, value: u32) -> Self {
    return u128 { lower: value as u64, upper: 0 };
}
From::from(self, value: u64) -> Self {
    return u128 { lower: value, upper: 0 };
}

}

extends u128 {
    infix `+`(self, other: u64) -> Self {
        wrapping_add(self, other as u128)
    }
    infix `+`(self, other: u128) -> Self {
        wrapping_add(self, other)
    }
}

extends u128 {
    wrapping_add(self, other: u128) -> Self {
        let (sum, carry) = self.lower.overflowing_add(other.lower);
        let upper = self.upper + other.upper + if carry { 1 } else { 0 };
        return u128 { lower: sum, upper: upper };
}
}


structure u128 {
    lower: u64,
    upper: u64,
}

extends u128 {
    wrapping_add(self, other: u128) -> Self {

    }
    saturating_add(self, other: u128) -> Self {

    }
    wrapping_sub(self, other: u128) -> Self {

    }
    saturating_sub(self, other: u128) -> Self {

    }
}


class Array<T> {
    inner: T
}

extends Array<T> {
    // `(array.len $vector (local.get $v))`
    length(self) -> usize {
    }

    get(self, index: usize) -> Option<T> {

    }
    get_unchecked(self, index: usize) {

    }
    set(self, index: usize, value: T) -> Unit {

    }
    set_unchecked(self, index: usize, value: T) -> Unit {

    }
    internal grow_double(self) -> Self {

    }
}

// (type $std::collection::ListU8 (struct (field buffer (array (mut u8))) (field filled u64)))
class ListU8 {
    buffer: Array<u8>,
    filled: u64,
}



extends ListU8 {
    push<T>(self, value: u8) {
        if self.filled == self.buffer.length() {
            self.buffer.grow_double();
        }
        self.push_unchecked(value);
    }
    push_unchecked(self, value: u8) {
        self.buffer.set_unchecked(self.filled, value);
        self.filled += 1;
    }
    pop(self) -> Option< u8 > {

    }
    pop_unchecked(self) -> u8 {

    }
}
