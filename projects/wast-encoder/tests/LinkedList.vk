



#primitive
class Array<T> {

}


extends Array<T> {

}



class LinkedList<T> {
    head: LinkedNode<T>?
    tail: LinkedNode<T>?
    length: usize
}

class LinkedListNode<T> {
    data: T
    past: LinkedListNode<T>?,
    next: LinkedListNode<T>?,
}

extends LinkedListNode<T> {
    get_relative(self, offset: isize) -> LinkedListNode<T>? {
        if offset == 0 {
            return self
        }
        let mut item = None;
        if offset > 0 {
            while offset > 0 {
                if self.next == null {
                    break;
                }
                item = node;
                offset -= 1;
            }
        }
        else {
            while offset < 0 {
                if self.past == null {
                    break;
                }
                item = node;
                offset += 1;
            }
        }
        item
    }
}