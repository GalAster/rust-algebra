
#[allow(unused_variables)]



/// ## Access control character
/// | Scopes    | curr module | sub module | curr package | other package |
/// | :-------- | :---------: | :--------: | :----------: | :-----------: |
/// | public     |      √     |     √      |      √       |       √       |
/// | internal   |      √     |     √      |      √       |       ×       |
/// | private    |      √     |     √      |      ×       |       ×       |
/// | restricted |      √     |     ×      |      ×       |       ×       |
///
#[native]
bitflag ReadWriteAccess: u8 {
    SelfRead      = 0b00000001;
    SelfWrite     = 0b00000010;
    ModuleRead    = 0b00000100;
    ModuleWrite   = 0b00001000;
    PackageRead   = 0b00010000;
    PackageWrite  = 0b00100000;
    GlobalRead    = 0b01000000;
    GlobalWrite   = 0b10000000;
    //? self modify
    Restricted = Self::SelfRead | Self::SelfWrite;
    //?
    Private = Self::ModuleRead | Self::ModuleWrite | Self::Restricted;
    //? inside
    Internal = Self::PackageRead | Self::PackageWrite | Self::Private;
    //?
    Public = Self::GlobalRead | Self::GlobalWrite | Self::Internal;
}

variant DataType {
    Variable,
    Funcion,
    ClassFunction,
}

trait AccessModifierHandler {
	#deterministic
	def access_modifier_handler(name: String, kind: DataType) -> ReadWriteAccess;
}

#[native, register_access_modifier_handler("public")]
extension AllPublic: AccessModifierHandler {
	def access_modifier_handler(name, kind) -> ReadWriteAccess {
		ReadWriteAccess::Public
	}
}

#[native, regiest_access_modifier_handler("private")]
extension AllPrivate {
	def access_modifier_handler(name, kind) -> ReadWriteAccess {
		ReadWriteAccess::Private
	}
}

#[native, regiest_access_modifier_handler("default")]
extension DefaultAccessControl {
	def access_modifier_handler(name, kind) -> ReadWriteAccess {
		if name.starts_with("__") {
            ReadWriteAccess::Public
        }
        else if name.starts_with("_") {
            ReadWriteAccess::Private
        }
        else {
            ReadWriteAccess::Public
        }
	}
}