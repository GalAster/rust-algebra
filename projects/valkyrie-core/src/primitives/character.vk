


#[internal, alias(char)]
class Character(u32);


#[internal]
extends char: Display;

#[internal, format_skip]
extends char:
         From<u8> +    From<u16> +    From<u32> + TryFrom<u64> + TryFrom<u128>
    + TryFrom<i8> + TryFrom<i16> + TryFrom<i32> + TryFrom<i64> + TryFrom<i128>
    + TryFrom<int> + TryFrom<uint>;

extends char {
	#macro_map[#const, #internal]

	MAX: char = '\u{10ffff}';

    REPLACEMENT_CHARACTER: char = '\u{FFFD}';
}

extends char {
	#macro_map[#internal]

	#[const]
	length_utf8(self) -> usize;

	#[const]
	length_utf16(self) -> usize;

	is_digit(self, radix: u32) -> bool;

	to_digit(self, radix: u32) -> Option<u32>;

	from_digit(num: u32, radix: u32) -> Option<char>;

	is_alphabetic(self) -> bool;

	is_numeric(self) -> bool;

	fn is_alphanumeric(self) -> bool;

	is_lowercase(self) -> bool;

	is_uppercase(self) -> bool;

	is_whitespace(self) -> bool;

	is_control(self) -> bool;

}
