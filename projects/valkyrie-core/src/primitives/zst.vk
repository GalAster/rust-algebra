//+*

# Zero-Sized Types

内置的 ZST 有 !, (), null 三种

自定义的 ZST 有以下写法

variant Type11;
variant Type12 { };


class Type21;
class Type22();
class Type23 { };

以上写法实际上都会被声明为 `variant Name { Name }`

class Type31 {
	left: (),
	right: null
}
variant Type32 { VName };
variant Type33 {
    Unit,
    Uninhabited(!),
    Uninhabited2(()),
}

以上写法也是 ZST, 如果一个类型的 ADT 计数小于等于1, 那么实际上也是个 ZST.

不过这些情况可以获取到名称索引

//-


//+?
The `null` type, also called "void", "nil".

type_size(null) // 0
//-

#[internal, alias(null)]
variant Null;

//+?
The `!` type, also called "never".

作为 Bottom type，表示程序不终止、异常等

Bottom type 不包含任何值所以永远不可能实例化该类型, 因此只能写在类型表达式中


//-
variant Never;

//? The error type for errors that can never happen.
type Infallible = Never;

//+?
The `()` type, also called “unit”.

The `()` type has exactly one value, and is used when there is no other meaningful value that could be returned.

type_size(()) // 0
//-

variant Unit;







