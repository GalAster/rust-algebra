trait Generator {
    type Item
    type Error
    next() -> Result[Self::Item, Self::Error]
}

type Iterator[T] = Generator[Item: T, Error: ()]



#derive(Exception)
class GeneratorDepleteException {};

effect Yielding[O, E] {
    YieldReturn(out: Result[O, E]) -> ();
}

def yield[I, O, F](out: O) -> () / [Yielding[I, O, F]] {
    raise YieldReturn(out)
}

def yield_finish[I, O, F](final: F) -> () / [Yielding[I, O, F]] {
    raise YieldFinishException(out)
}

