Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 1,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: 1,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 2,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 2,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 3,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: 3,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 4,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 4,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 4,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: 4,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 5,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 5,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 6,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 6,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 7,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: 7,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 8,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 8,
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 9,
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: 9,
                chain: [],
            },
        ),
    ),
]
Suite[
    ApplyExpression(
        ChainCall {
            base: true,
            chain: [],
        },
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: 0,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: 0.0,
                chain: [],
            },
        ),
        Addition::add,
        ApplyExpression(
            ChainCall {
                base: ByteLiteral {
                    handler: 'c',
                    value: "m",
                },
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: "",
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: "",
                chain: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        ApplyExpression(
            ChainCall {
                base: StringTemplate(
                    "",
                    x,
                    "",
                ),
                chain: [],
            },
        ),
        Concat::concat,
        ApplyExpression(
            ChainCall {
                base: StringTemplate(
                    "",
                    ApplyExpression(
                        ChainCall {
                            base: y,
                            chain: [],
                        },
                    ),
                    "",
                ),
                chain: [],
            },
        ),
    ),
]
