Suite[
    InfixExpression(
        1,
        Addition::add,
        1,
    ),
]
Suite[
    InfixExpression(
        2,
        Concat::concat,
        2,
    ),
]
Suite[
    InfixExpression(
        3,
        Addition::add,
        ChainCall(
            3,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        4,
        Concat::concat,
        ChainCall(
            4,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        4,
        Addition::add,
        ChainCall(
            4,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        5,
        Concat::concat,
        ChainCall(
            5,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        6,
        Concat::concat,
        ChainCall(
            6,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        7,
        Addition::add,
        ChainCall(
            7,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                    Positive::positive,
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        8,
        Concat::concat,
        ChainCall(
            8,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    InfixExpression(
        9,
        Concat::concat,
        ChainCall(
            9,
            UnaryArgument {
                prefix: [
                    Positive::positive,
                    Positive::positive,
                ],
                suffix: [],
            },
        ),
    ),
]
Suite[
    true,
]
Suite[
    InfixExpression(
        0,
        Addition::add,
        0.0,
        Addition::add,
        ByteLiteral {
            handler: 'c',
            value: "m",
        },
    ),
]
Suite[
    InfixExpression(
        "",
        Concat::concat,
        "",
    ),
]
Suite[
    InfixExpression(
        StringTemplate(
            "",
            x,
            "",
        ),
        Concat::concat,
        StringTemplate(
            "",
            y,
            "",
        ),
    ),
]
